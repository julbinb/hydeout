- key: "SBLP 2016"
  title: "Language Support for Generic Programming in Object-Oriented Languages: Peculiarities, Drawbacks, Ways of Improvement"
  author: Julia Belyakova
  doi: 
    name: 10.1007/978-3-319-45279-1_1
    link: http://link.springer.com/chapter/10.1007%2F978-3-319-45279-1_1
  venue: "Lecture Notes in Computer Science. Programming Languages: 20th Brazilian Symposium, <a target='_blank' href='http://cbsoft.org/sblp2016/xx-brazilian-symposium-on-programming-languages'>SBLP 2016</a> (Brazilian Symposium on Programming Languages). No 9889"
  sbn: "978-3-319-45279-1"
  links:
    - name: BibTeX
      link: /files/bibtex/SBLP-2016.txt
    - name: preprint PDF
      link: /files/papers/sblp2016_OO-generics.pdf
    - name: slides PDF
      link: /files/slides/belyakova-SBLP2016-slides.pdf
  abstract: "Earlier comparative studies of language support for generic programming (GP) have shown that mainstream object-oriented (OO) languages such as C# and Java provide weaker support for GP as compared with functional languages such as Haskell or SML. But many new object-oriented languages have appeared in recent years. Have they improved the support for generic programming? And if not, is there a reason why OO languages yield to functional ones in this respect? In this paper we analyse language constructs for GP in seven modern object-oriented languages. We demonstrate that all of these languages follow the same approach to constraining type parameters, which has a number of inevitable problems. However, those problems are successfully lifted with the use of the another approach. Several language extensions that adopt this approach and allow to improve GP in OO languages are considered. We analyse the dependencies between different language features, discuss the features' support using both approaches, and propose which approach is more expressive."


- key: "FTfJP 2017"
  title: Generic Approach to Certified Static Checking of Module-like Constructs
  kind: Extended Abstract
  author: Julia Belyakova
  doi: 
    name: 10.1145/3103111.3104045
    link: https://dl.acm.org/citation.cfm?doid=3103111.3104045
  venue: "Proceedings of the 19th Workshop on Formal Techniques for Java-like Programs (<a target='_blank' href='https://2017.ecoop.org/track/FTfJP-2017-papers'>FTfJP 2017</a>)"
  links:
    - name: BibTeX
      link: /files/bibtex/FTfJP-2017.txt
    - name: preprint PDF
      link: /files/papers/ftfjp2017_cert-modules.pdf
    - name: slides PDF
      link: /files/slides/belyakova-FTfJP2017-handout.pdf
  abstract: "In this paper we consider the problem of certified static checking of module-like constructs of programming languages. We argue that there are algorithms and properties related to modules that can be defined and proven in abstract way. We advocate the design of a generic Coq library, which is aimed to provide three building blocks for each checking mechanism: propositional, computable, and correctness proofs. Implemented part of the library is justified by applying it to a certified static checker of an extension of STLC."


- key: "SYRCoSE 2016"
  title: "Language Support for Generic Programming in Object-Oriented Languages: Design Challenges"
  author: Julia Belyakova
  doi: 
    name: 10.15514/ISPRAS-2016-28(2)-1
    link: http://www.ispras.ru/en/proceedings/isp_28_2016_2/isp_28_2016_2_5/
  venue: "Proceedings of the Institute for System Programming, No 28(2)"
  links:
    - name: BibTeX
      link: /files/bibtex/SYRCoSE-2016.txt
    - name: e-print (ACM) PDF
      link: /files/papers/syrcose2016_OO-generics.pdf
    - name: e-print PDF
      link: /files/papers/ispras2016_OO-generics.pdf
    - name: slides PDF
      link: /files/slides/belyakova-SYRCoSE2016-slides.pdf
  abstract: "It is generally considered that object-oriented (OO) languages provide weaker support for generic programming (GP) as compared with functional languages such as Haskell or SML. There were several comparative studies which showed this. But many new object-oriented languages have appeared in recent years. Have they improved the support for generic programming? And if not, is there a reason why OO languages yield to functional ones in this respect? In the earlier comparative studies object-oriented languages were usually not treated in any special way. However, the OO features affect language facilities for GP and a style people write generic programs in such languages. In this paper we compare ten modern object-oriented languages and language extensions with respect to their support for generic programming. It has been discovered that every of these languages strictly follows one of the two approaches to constraining type parameters. So the first design challenge we consider is “which approach is better”. It turns out that most of the explored OO languages use the less powerful one. The second thing that has a big impact on the expressive power of a programming language is language support for multiple models. We discuss pros and cons of this feature and its relation to other language facilities for generic programming."

- key: "SYRCoSE 2015"
  title: "Pitfalls of C# Generics and Their Solution Using Concepts"
  author: "Julia Belyakova, <a target='_blank' href='https://sfedu.ru/person/miks'>Stanislav Mikhalkovich</a>"
  doi: 
    name: 10.15514/ISPRAS-2015-27(3)-2
    link: http://www.ispras.ru/en/proceedings/isp_27_2015_3/isp_27_2015_3_29/
  venue: "Proceedings of the Institute for System Programming, No 27(3)"
  links:
    - name: BibTeX
      link: /files/bibtex/SYRCoSE-2015.txt
    - name: e-print (ACM) PDF
      link: /files/papers/syrcose2015_CSharp-pitfalls.pdf
    - name: e-print PDF
      link: /files/papers/ispras2015_CSharp-pitfalls.pdf
    - name: slides PDF
      link: /files/slides/belyakova-SYRCoSE2015-slides.pdf
  abstract: "As was shown in earlier studies, in comparison with Haskell type classes and C++ concepts such mainstream object-oriented languages as C# and Java provide much limited mechanisms of generic programming based on F-bounded polymorphism. Main pitfalls of C# generics are carefully considered in this paper. A special attention is given to drawbacks of recursive constraints (F-constraints), ambiguous semantics of interfaces, lack of language support for multi-type constraints and retroactive interface implementation, and subtle problems of the Concept design pattern, which is widely used not only in C#, but in Java and Scala as well. To solve the problems of C# generics, extending C# language with concepts is proposed: as a new language construct, concepts are to be used as constraints on type parameters exclusively, with object-oriented interfaces being used as types. In contrast to basic C++ concepts, C# concepts may include subtype and supertype constraints, allow constraints aliasing and automatic generation of default models. The major differ-ence of the concepts design proposed is language support for multiple models. The latter feature is supported neither in C++ concepts, nor in Haskell type classes. In conclusion, a mechanism of implementation of concepts via translation to basic C# is outlined. The most important property of the translation is a possibility to recover a source code in extended language from a compiled module."

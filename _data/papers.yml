- key: "OOPSLA 2020"
  link: https://conf.researchr.org/track/splash-2018/splash-2018-OOPSLA
  title: "Julia Subtyping: A Rational Reconstruction"
  author: "<a target='_blank' href='https://www.di.ens.fr/~zappa'>Francesco Zappa Nardelli</a>, Julia Belyakova, <a target='_blank' href='http://staff.mmcs.sfedu.ru/~ulysses/'>Artem Pelenitsyn</a>, <a target='_blank' href='https://benchung.github.io/'>Benjamin Chung</a>, <a target='_blank' href='https://github.com/JeffBezanson'>Jeff Bezanson</a>, <a target='_blank' href='http://janvitek.org/'>Jan Vitek</a>"
  doi: 
    name: 10.1145/3276483
    link: https://doi.org/10.1145/3276483
  venue: "Proc. ACM on Programming Languages, Volume 2, OOPSLA, Article 113 (28 pages)"
  sbn: "???"
  links:
    - name: BibTeX
      link: /files/bibtex/OOPSLA-2018.txt
    - name: preprint PDF
      link: https://www.di.ens.fr/~zappa/projects/lambdajulia/paper.pdf
    - name: video
      link: https://youtu.be/l8BWVXE7dwI
    - name: web
      link: https://www.di.ens.fr/~zappa/projects/lambdajulia/
      colored: true
  abstract: "Programming languages that support multiple dispatch rely on an expressive notion of subtyping to specify method applicability. In these languages, type annotations on method declarations are used to select, out of a potentially large set of methods, the one that is most appropriate for a particular tuple of arguments. Julia is a language for scientific computing built around multiple dispatch and an expressive subtyping relation. This paper provides the first formal definition of Julia's subtype relation and motivates its design. We validate our specification empirically with an implementation of our definition that we compare against the existing Julia implementation on a collection of real-world programs. Our subtype implementation differs on 122 subtype tests out of 6014476. The first 120 differences are due to a bug in Julia that was fixed once reported; the remaining 2 are under discussion."


- key: "VIS 2020 (short paper)"
  link: http://ieeevis.org/year/2020/welcome
  title: "Just TYPEical: Visualizing Common Function Type Signatures in R"
  author: "<a target='_blank' href='http://camoy.name/'>Cameron Moy</a>, Julia Belyakova, Alexi Turcotte, Sara Di Bartolomeo, Cody Dunne"
  doi: 
    name: 10.31219/osf.io/pyqac
    link: https://doi.org/10.31219/osf.io/pyqac
  venue: "2020 IEEE Visualization Conference Short Papers, OSF Preprints (5 pages)"
  links:
    - name: BibTeX
      link: /files/bibtex/VIS-2020-short.txt
    - name: preprint PDF
      link: /files/papers/vis2020-short_typeical-for-R.pdf
    - name: code
      link: https://github.com/camoy/typeical
    - name: video
      link: https://osf.io/u7mzd/
    - name: web
      link: https://typeical.github.io/
      colored: true
  abstract: "Data-driven approaches to programming language design are uncommon. Despite the availability of large code repositories, distilling semantically-rich information from programs remains difficult. Important dimensions, like run-time type data, are inscrutable without the appropriate tools. We contribute a task abstraction and interactive visualization, TYPEical, for programming language designers who are exploring and analyzing type information from execution traces. Our approach aids user understanding of function type signatures across many executions. Insights derived from our visualization are aimed at informing language design decisions — specifically of a new gradual type system being developed for the R programming language. A copy of this paper, along with all the supplemental material, is available at osf.io/mc6zt"
  video:
    key: "VIS-2020-video"
    html: '<iframe src="https://mfr.osf.io/render?url=https://osf.io/u7mzd/?direct%26mode=render%26action=download" width="560" height="315" marginheight="0" frameborder="0" allowfullscreen webkitallowfullscreen></iframe>'
  preview:
    key: "VIS-2020-preview"
    html: '<iframe width="560" height="315" src="https://www.youtube.com/embed/9RVGvFIeRgY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'


- key: "FTfJP 2019"
  link: https://2019.ecoop.org/home/FTfJP-2019
  title: Decidable Tag-Based Semantic Subtyping for Nominal Types, Tuples, and Unions
  author: Julia Belyakova
  doi: 
    name: 10.1145/3340672.3341115
    link: https://dl.acm.org/citation.cfm?doid=3340672.3341115
  venue: "Proc. 21st Workshop on Formal Techniques for Java-like Programs, Article 3 (11 pages)"
  links:
    - name: BibTeX
      link: /files/bibtex/FTfJP-2019.txt
    - name: preprint PDF
      link: https://github.com/julbinb/ftfjp-2019/blob/master/paper/minijl-ftfjp2019.pdf
    - name: slides GoogleDrive
      link: https://docs.google.com/presentation/d/1zDxC4b0Z1I6_DCVT-7VmUFEuBnInsql6diYvAdrEx4E/edit?usp=sharing
    - name: GitHub
      link: https://github.com/julbinb/ftfjp-2019
      colored: true
  abstract: "Semantic subtyping enables simple, set-theoretical reasoning about types by interpreting a type as the set of its values. Previously, semantic subtyping has been studied primarily in the context of statically typed languages with structural typing. In this paper, we explore the applicability of semantic subtyping in the context of a dynamic language with nominal types. Instead of static type checking, dynamic languages rely on run-time checking of type tags associated with values, so we propose using the tags for semantic subtyping. We base our work on a fragment of the Julia language and present tag-based semantic subtyping for nominal types, tuples, and unions, where types are interpreted set-theoretically as sets of type tags. The proposed subtyping relation is shown to be decidable, and a corresponding analytic definition is provided. The implications of using semantic subtyping for multiple dispatch are also discussed."


- key: "OOPSLA 2018"
  link: https://conf.researchr.org/track/splash-2018/splash-2018-OOPSLA
  title: "Julia Subtyping: A Rational Reconstruction"
  author: "<a target='_blank' href='https://www.di.ens.fr/~zappa'>Francesco Zappa Nardelli</a>, Julia Belyakova, <a target='_blank' href='http://staff.mmcs.sfedu.ru/~ulysses/'>Artem Pelenitsyn</a>, <a target='_blank' href='https://benchung.github.io/'>Benjamin Chung</a>, <a target='_blank' href='https://github.com/JeffBezanson'>Jeff Bezanson</a>, <a target='_blank' href='http://janvitek.org/'>Jan Vitek</a>"
  doi: 
    name: 10.1145/3276483
    link: https://doi.org/10.1145/3276483
  venue: "Proc. ACM on Programming Languages, Volume 2, OOPSLA, Article 113 (28 pages)"
  sbn: "???"
  links:
    - name: BibTeX
      link: /files/bibtex/OOPSLA-2018.txt
    - name: preprint PDF
      link: https://www.di.ens.fr/~zappa/projects/lambdajulia/paper.pdf
    - name: video
      link: https://youtu.be/l8BWVXE7dwI
    - name: web
      link: https://www.di.ens.fr/~zappa/projects/lambdajulia/
      colored: true
  abstract: "Programming languages that support multiple dispatch rely on an expressive notion of subtyping to specify method applicability. In these languages, type annotations on method declarations are used to select, out of a potentially large set of methods, the one that is most appropriate for a particular tuple of arguments. Julia is a language for scientific computing built around multiple dispatch and an expressive subtyping relation. This paper provides the first formal definition of Julia's subtype relation and motivates its design. We validate our specification empirically with an implementation of our definition that we compare against the existing Julia implementation on a collection of real-world programs. Our subtype implementation differs on 122 subtype tests out of 6014476. The first 120 differences are due to a bug in Julia that was fixed once reported; the remaining 2 are under discussion."
  video:
    key: "OOPSLA-2018-video"
    html: '<iframe width="560" height="315" src="https://www.youtube.com/embed/l8BWVXE7dwI" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'


- key: "FTfJP 2017"
  link: https://2017.ecoop.org/track/FTfJP-2017-papers
  title: Generic Approach to Certified Static Checking of Module-like Constructs
  kind: Extended Abstract
  author: Julia Belyakova
  doi: 
    name: 10.1145/3103111.3104045
    link: https://dl.acm.org/citation.cfm?doid=3103111.3104045
  venue: "Proc. 19th Workshop on Formal Techniques for Java-like Programs, Article 5 (2 pages)"
  links:
    - name: BibTeX
      link: /files/bibtex/FTfJP-2017.txt
    - name: preprint PDF
      link: /files/papers/ftfjp2017_cert-modules.pdf
    - name: slides PDF
      link: /files/slides/belyakova-FTfJP2017-handout.pdf
  abstract: "In this paper we consider the problem of certified static checking of module-like constructs of programming languages. We argue that there are algorithms and properties related to modules that can be defined and proven in abstract way. We advocate the design of a generic Coq library, which is aimed to provide three building blocks for each checking mechanism: propositional, computable, and correctness proofs. Implemented part of the library is justified by applying it to a certified static checker of an extension of STLC."


- key: "SBLP 2016"
  link: http://cbsoft.org/sblp2016/xx-brazilian-symposium-on-programming-languages
  title: "Language Support for Generic Programming in Object-Oriented Languages: Peculiarities, Drawbacks, Ways of Improvement"
  author: Julia Belyakova
  doi: 
    name: 10.1007/978-3-319-45279-1_1
    link: http://link.springer.com/chapter/10.1007%2F978-3-319-45279-1_1
  venue: "LNCS Programming Languages: 20th Brazilian Symposium on Programming Languages, Volume 9889, Article 1 (15 pages)"
  sbn: "978-3-319-45279-1"
  links:
    - name: BibTeX
      link: /files/bibtex/SBLP-2016.txt
    - name: preprint PDF
      link: /files/papers/sblp2016_OO-generics.pdf
    - name: slides PDF
      link: /files/slides/belyakova-SBLP2016-slides.pdf
  abstract: "Earlier comparative studies of language support for generic programming (GP) have shown that mainstream object-oriented (OO) languages such as C# and Java provide weaker support for GP as compared with functional languages such as Haskell or SML. But many new object-oriented languages have appeared in recent years. Have they improved the support for generic programming? And if not, is there a reason why OO languages yield to functional ones in this respect? In this paper we analyse language constructs for GP in seven modern object-oriented languages. We demonstrate that all of these languages follow the same approach to constraining type parameters, which has a number of inevitable problems. However, those problems are successfully lifted with the use of the another approach. Several language extensions that adopt this approach and allow to improve GP in OO languages are considered. We analyse the dependencies between different language features, discuss the features' support using both approaches, and propose which approach is more expressive."


- key: "SYRCoSE 2016"
  title: "Language Support for Generic Programming in Object-Oriented Languages: Design Challenges"
  author: Julia Belyakova
  doi: 
    name: 10.15514/ISPRAS-2016-28(2)-1
    link: http://www.ispras.ru/en/proceedings/isp_28_2016_2/isp_28_2016_2_5/
  venue: "Proceedings of the Institute for System Programming, No 28(2)"
  links:
    - name: BibTeX
      link: /files/bibtex/SYRCoSE-2016.txt
    - name: e-print (ACM) PDF
      link: /files/papers/syrcose2016_OO-generics.pdf
    - name: e-print PDF
      link: /files/papers/ispras2016_OO-generics.pdf
    - name: slides PDF
      link: /files/slides/belyakova-SYRCoSE2016-slides.pdf
  abstract: "It is generally considered that object-oriented (OO) languages provide weaker support for generic programming (GP) as compared with functional languages such as Haskell or SML. There were several comparative studies which showed this. But many new object-oriented languages have appeared in recent years. Have they improved the support for generic programming? And if not, is there a reason why OO languages yield to functional ones in this respect? In the earlier comparative studies object-oriented languages were usually not treated in any special way. However, the OO features affect language facilities for GP and a style people write generic programs in such languages. In this paper we compare ten modern object-oriented languages and language extensions with respect to their support for generic programming. It has been discovered that every of these languages strictly follows one of the two approaches to constraining type parameters. So the first design challenge we consider is “which approach is better”. It turns out that most of the explored OO languages use the less powerful one. The second thing that has a big impact on the expressive power of a programming language is language support for multiple models. We discuss pros and cons of this feature and its relation to other language facilities for generic programming."

- key: "SYRCoSE 2015"
  title: "Pitfalls of C# Generics and Their Solution Using Concepts"
  author: "Julia Belyakova, <a target='_blank' href='https://sfedu.ru/person/miks'>Stanislav Mikhalkovich</a>"
  doi: 
    name: 10.15514/ISPRAS-2015-27(3)-2
    link: http://www.ispras.ru/en/proceedings/isp_27_2015_3/isp_27_2015_3_29/
  venue: "Proceedings of the Institute for System Programming, No 27(3)"
  links:
    - name: BibTeX
      link: /files/bibtex/SYRCoSE-2015.txt
    - name: e-print (ACM) PDF
      link: /files/papers/syrcose2015_CSharp-pitfalls.pdf
    - name: e-print PDF
      link: /files/papers/ispras2015_CSharp-pitfalls.pdf
    - name: slides PDF
      link: /files/slides/belyakova-SYRCoSE2015-slides.pdf
  abstract: "As was shown in earlier studies, in comparison with Haskell type classes and C++ concepts such mainstream object-oriented languages as C# and Java provide much limited mechanisms of generic programming based on F-bounded polymorphism. Main pitfalls of C# generics are carefully considered in this paper. A special attention is given to drawbacks of recursive constraints (F-constraints), ambiguous semantics of interfaces, lack of language support for multi-type constraints and retroactive interface implementation, and subtle problems of the Concept design pattern, which is widely used not only in C#, but in Java and Scala as well. To solve the problems of C# generics, extending C# language with concepts is proposed: as a new language construct, concepts are to be used as constraints on type parameters exclusively, with object-oriented interfaces being used as types. In contrast to basic C++ concepts, C# concepts may include subtype and supertype constraints, allow constraints aliasing and automatic generation of default models. The major differ-ence of the concepts design proposed is language support for multiple models. The latter feature is supported neither in C++ concepts, nor in Haskell type classes. In conclusion, a mechanism of implementation of concepts via translation to basic C# is outlined. The most important property of the translation is a possibility to recover a source code in extended language from a compiled module."



- key: "Дистанционное обучение 2012"
  title: "Использование веб-среды PascalABC.NET для дистанционного обучения программированию (Using a Web-Environment PascalABC.NET for Distance Teaching of Programming)"
  author: "<a target='_blank' href='https://sfedu.ru/person/mabr'>М. Э. Абрямян</a>, Ю. В. Белякова, <a target='_blank' href='https://sfedu.ru/person/miks'>С. С. Михалкович</a>"
  venue: "Журнал «Дистанционное и виртуальное обучение». № 57(3)"
  links:
    - name: BibTeX
      link: /files/bibtex/DistVirtLearn-2012.txt
    - name: e-print (in Russian) PDF
      link: /files/papers/DistVirtLearn2012_pascalWDE.pdf
  abstract: "В работе описывается интегрированная веб-среда программирования PascalABC.NET WDE. Основное внимание уделяется особенностям среды и связанным с ней сервисам, которые позволяют эффективно использовать ее при организации дистанционного обучения. (An integrated web-environment PascalABC.NET WDE is described in the article. Great attention is paid to its features and related services that enable to use it effectively in organizing distance education.)"

- key: "Современные ИТ 2015"
  title: "Концепт-параметры как механизм развития средств обобщённого программирования в языке C# (Concept Parameters as a Mechanism of Development of the Language Support for Generic Programming in C#)"
  author: "Ю. В. Белякова, <a target='_blank' href='https://sfedu.ru/person/miks'>С. С. Михалкович</a>"
  venue: "Научный журнал «Современные информационные технологии и ИТ-образование», том 2 (№ 11)"
  links:
    - name: BibTeX
      link: /files/bibtex/SITandITO-2015.txt
    - name: e-print (in Russian) PDF
      link: /files/papers/SITandITO2015_concepts.pdf
